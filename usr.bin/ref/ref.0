


REF(1)                                                     REF(1)


NNAAMMEE
       ref - Display a C function header

SSYYNNOOPPSSIISS
       rreeff [-t] [-c _c_l_a_s_s]... [-f _f_i_l_e]... _t_a_g

DDEESSCCRRIIPPTTIIOONN
       _r_e_f quickly locates and displays the header of a function.
       To do this, _r_e_f looks in the "tags" file for the line that
       describes the function, and then scans the source file for
       the function.  When it locates the function,  it  displays
       an  introductory comment (if there is one), the function's
       declaration, and the declarations of all arguments.

SSEEAARRCCHH MMEETTHHOODD
       _r_e_f uses a fairly sophisticated tag look-up algorithm.  If
       you  supply a filename via --ff _f_i_l_e, then elvis first scans
       the tags file for a  static  tag  from  that  file.   This
       search  is  limited to the tags file in the current direc-
       tory.

       If you  supply  a  classname  via  --cc  _c_l_a_s_s,  then  elvis
       searches  for  a  tag from that class.  This search is not
       limited to the current directory; You can supply a list of
       directories  in  the environment variable _T_A_G_P_A_T_H, and _r_e_f
       will search through the  "tags"  file  in  each  directory
       until it finds a tag in the desired class.

       If  that  fails,  _r_e_f will then try to look up an ordinary
       global tag.  This search checks  all  of  the  directories
       listed in _T_A_G_P_A_T_H, too.

       If  you've  given the --tt flag, then _r_e_f will simply output
       the tag line that it found, and then  exit.   Without  --tt,
       though,  _r_e_f will search for the tag line.  It will try to
       open the source file, which should be in the  same  direc-
       tory  as  the  tags file where the tag was discovered.  If
       the source file doesn't exist, or is unreadable, then  _r_e_f
       will  try  to open a file called "_r_e_f_s" in that directory.
       Either way, _r_e_f will try to locate the  tag,  and  display
       whatever it finds.

IINNTTEERRAACCTTIIOONN WWIITTHH EELLVVIISS
       _r_e_f  is  used by _e_l_v_i_s' shift-K command.  If the cursor is
       located on a word such as "splat", in  the  file  "foo.c",
       then  _e_l_v_i_s will invoke _r_e_f with the command "ref -f foo.c
       splat".

       If _e_l_v_i_s has been compiled with the -DEXTERNAL_TAGS  flag,
       then  _e_l_v_i_s  will use _r_e_f to scan the tags files.  This is
       slower than the built-in  tag  searching,  but  it  allows
       _e_l_v_i_s to access the more sophisticated tag lookup provided
       by _r_e_f.  Other than that, external tags should act exactly
       like internal tags.



                                                                1





REF(1)                                                     REF(1)


OOPPTTIIOONNSS
       --tt     Output tag info, instead of the function header.

       --ff _f_i_l_e
              The  tag  might  be a static function in _f_i_l_e.  You
              can use several  -f  flags  to  have  _r_e_f  consider
              static tags from more than one file.

       --cc _c_l_a_s_s
              The  tag might be a member of class _c_l_a_s_s.  You can
              use several -c flags to have _r_e_f consider tags from
              more than one class.

FFIILLEESS
       ttaaggss   List  of function names and their locations, gener-
              ated by _c_t_a_g_s.

       rreeffss   Function  headers  extracted  from   source   files
              (optional).

EENNVVIIRROONNMMEENNTT
       TTAAGGPPAATTHH
              List  of  directories to be searched.  The elements
              in the list are separated by either semicolons (for
              MS-DOS,  Atari  TOS,  and  AmigaDos),  or by colons
              (every other operating system).  For each operating
              system,  _r_e_f has a built-in default which is proba-
              bly adequate.

NNOOTTEESS
       You might want to generate a  "tags"  file  the  directory
       that  contains  the  source code for standard C library on
       your system.  If licensing restrictions prevent  you  from
       making  the library source readable by everybody, then you
       can have _c_t_a_g_s generate a "refs"  file,  and  make  "refs"
       readable by everybody.

       If  your system doesn't come with the library source code,
       then perhaps you can produce something workable  from  the
       _l_i_n_t libraries.

SSEEEE AALLSSOO
       elvis(1), ctags(1)

AAUUTTHHOORR
       Steve Kirkendall
       kirkenda@cs.pdx.edu










                                                                2


